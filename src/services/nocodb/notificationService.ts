
import { BaseNocodbService } from './baseService';
import { NocodbConfig } from './types';
import { DataFormatter } from './dataFormatter';
import { ApiOperations } from './apiOperations';
import { ErrorHandler } from './errorHandler';

export class NotificationService extends BaseNocodbService {
  private apiOperations: ApiOperations;

  constructor(config: NocodbConfig) {
    super(config);
    this.apiOperations = new ApiOperations(config);
  }

  private getCurrentUserId(): string | null {
    try {
      const savedUser = localStorage.getItem('currentUser');
      if (savedUser) {
        const user = JSON.parse(savedUser);
        return user.ID;
      }
    } catch (error) {
      console.error('Erro ao obter ID do usu√°rio:', error);
    }
    return null;
  }

  async getHotmartNotifications(baseId: string): Promise<any[]> {
    try {
      console.log('üîç Buscando notifica√ß√µes Hotmart do NocoDB...');
      console.log('Base ID:', baseId);
      
      const userId = this.getCurrentUserId();
      if (!userId) {
        console.log('‚ùå Usu√°rio n√£o autenticado');
        return [];
      }
      
      console.log('üë§ Filtrando notifica√ß√µes para usu√°rio ID:', userId);
      
      const tableId = await this.getTableId(baseId, 'NotificacoesHotmart');
      if (!tableId) {
        console.log('‚ùå ID da tabela NotificacoesHotmart n√£o encontrado');
        console.log('Tentando buscar com nome alternativo...');
        
        const altTableId = await this.getTableId(baseId, 'Notifica√ß√µes Hotmart');
        if (!altTableId) {
          console.log('‚ùå Tabela de notifica√ß√µes n√£o encontrada');
          return [];
        }
        console.log('‚úÖ Tabela encontrada com nome alternativo:', altTableId);
      } else {
        console.log('‚úÖ Tabela encontrada:', tableId);
      }
      
      const finalTableId = tableId || await this.getTableId(baseId, 'Notifica√ß√µes Hotmart');
      return await this.apiOperations.fetchNotificationsByUser(baseId, finalTableId!, userId);
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar notifica√ß√µes:', error);
      return [];
    }
  }

  async saveHotmartNotification(baseId: string, notificationData: any): Promise<boolean> {
    try {
      const userId = this.getCurrentUserId();
      if (!userId) {
        ErrorHandler.logOperationFailure('obter ID do usu√°rio autenticado');
        return false;
      }

      ErrorHandler.logOperationStart('Salvando/Atualizando notifica√ß√£o Hotmart no NocoDB', notificationData);
      
      const data = DataFormatter.formatNotificationForNocoDB({
        ...notificationData,
        userId // Adicionar ID do usu√°rio aos dados
      });
      
      const tableId = await this.findTableId(baseId);
      if (!tableId) {
        ErrorHandler.logOperationFailure('encontrar tabela de notifica√ß√µes');
        return false;
      }

      console.log('‚úÖ Tabela encontrada para opera√ß√£o:', tableId);
      console.log('üë§ Salvando notifica√ß√£o para usu√°rio ID:', userId);

      if (notificationData.ruleId) {
        return await this.updateNotification(baseId, tableId, notificationData.ruleId, data, userId);
      } else {
        return await this.createNotification(baseId, tableId, data);
      }
      
    } catch (error) {
      return ErrorHandler.handleApiError(error, 'ao salvar/atualizar notifica√ß√£o Hotmart', notificationData);
    }
  }

  private async findTableId(baseId: string): Promise<string | null> {
    let tableId = await this.getTableId(baseId, 'NotificacoesHotmart');
    
    if (!tableId) {
      console.log('‚ö†Ô∏è Tabela NotificacoesHotmart n√£o encontrada, tentando nome alternativo...');
      tableId = await this.getTableId(baseId, 'Notifica√ß√µes Hotmart');
    }
    
    if (!tableId) {
      console.error('‚ùå Nenhuma tabela de notifica√ß√µes encontrada');
      return null;
    }

    return tableId;
  }

  private async updateNotification(baseId: string, tableId: string, recordId: string, data: any, userId: string): Promise<boolean> {
    try {
      console.log('üìù Atualizando notifica√ß√£o existente com ID:', recordId);
      console.log('üë§ Verificando propriedade da notifica√ß√£o para usu√°rio:', userId);
      
      // Verificar se a notifica√ß√£o pertence ao usu√°rio antes de atualizar
      const existingRecord = await this.apiOperations.getRecordById(baseId, tableId, recordId);
      if (!existingRecord || existingRecord['ID do Usu√°rio'] !== userId) {
        console.error('‚ùå Acesso negado: notifica√ß√£o n√£o pertence ao usu√°rio');
        return false;
      }
      
      const result = await this.apiOperations.updateRecord(baseId, tableId, recordId, data);
      
      DataFormatter.logUpdatedFields(data);
      ErrorHandler.logOperationSuccess('Notifica√ß√£o atualizada');
      return true;
    } catch (error) {
      ErrorHandler.logOperationFailure('atualizar notifica√ß√£o');
      return false;
    }
  }

  private async createNotification(baseId: string, tableId: string, data: any): Promise<boolean> {
    try {
      console.log('‚ûï Criando nova notifica√ß√£o com todos os dados');
      const result = await this.apiOperations.createRecord(baseId, tableId, data);
      
      DataFormatter.logSavedFields(result, data);
      ErrorHandler.logOperationSuccess('Nova notifica√ß√£o criada');
      return true;
    } catch (error) {
      ErrorHandler.logOperationFailure('criar nova notifica√ß√£o');
      return false;
    }
  }

  async deleteNotification(baseId: string, recordId: string): Promise<boolean> {
    try {
      const userId = this.getCurrentUserId();
      if (!userId) {
        console.error('‚ùå Usu√°rio n√£o autenticado');
        return false;
      }

      const tableId = await this.findTableId(baseId);
      if (!tableId) {
        console.error('‚ùå Tabela n√£o encontrada');
        return false;
      }

      console.log('üóëÔ∏è Excluindo notifica√ß√£o:', recordId);
      console.log('üë§ Verificando propriedade para usu√°rio:', userId);

      // Verificar se a notifica√ß√£o pertence ao usu√°rio antes de excluir
      const existingRecord = await this.apiOperations.getRecordById(baseId, tableId, recordId);
      if (!existingRecord || existingRecord['ID do Usu√°rio'] !== userId) {
        console.error('‚ùå Acesso negado: notifica√ß√£o n√£o pertence ao usu√°rio');
        return false;
      }

      const success = await this.apiOperations.deleteRecord(baseId, tableId, recordId);
      
      if (success) {
        console.log('‚úÖ Notifica√ß√£o exclu√≠da com sucesso');
      }
      
      return success;
    } catch (error) {
      console.error('‚ùå Erro ao excluir notifica√ß√£o:', error);
      return false;
    }
  }
}
