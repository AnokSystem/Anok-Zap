
import { BaseNocodbService } from './baseService';
import { NocodbConfig } from './types';
import { ErrorHandler } from './errorHandler';

export class ApiOperations extends BaseNocodbService {
  constructor(config: NocodbConfig) {
    super(config);
  }

  async fetchNotificationsByUser(baseId: string, tableId: string, userId: string): Promise<any[]> {
    try {
      console.log('üîç API - Buscando notifica√ß√µes para usu√°rio:', userId);
      
      const response = await fetch(
        `${this.config.baseUrl}/api/v1/db/data/noco/${baseId}/${tableId}?where=(ID%20do%20Usu√°rio,eq,${userId})`,
        {
          method: 'GET',
          headers: this.headers,
        }
      );

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API - Notifica√ß√µes encontradas:', data.list?.length || 0);
        return data.list || [];
      } else {
        const errorText = await response.text();
        console.error('‚ùå API - Erro na busca:', response.status, errorText);
        return [];
      }
    } catch (error) {
      console.error('‚ùå API - Erro ao buscar notifica√ß√µes por usu√°rio:', error);
      return [];
    }
  }

  async fetchAllNotifications(baseId: string, tableId: string): Promise<any[]> {
    try {
      console.log('üîç API - Buscando TODAS as notifica√ß√µes...');
      
      const response = await fetch(
        `${this.config.baseUrl}/api/v1/db/data/noco/${baseId}/${tableId}`,
        {
          method: 'GET',
          headers: this.headers,
        }
      );

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API - Total de notifica√ß√µes encontradas:', data.list?.length || 0);
        return data.list || [];
      } else {
        const errorText = await response.text();
        console.error('‚ùå API - Erro na busca:', response.status, errorText);
        return [];
      }
    } catch (error) {
      console.error('‚ùå API - Erro ao buscar todas as notifica√ß√µes:', error);
      return [];
    }
  }

  async getRecordById(baseId: string, tableId: string, recordId: string): Promise<any | null> {
    try {
      console.log('üîç API - Buscando registro por ID:', recordId);
      
      const response = await fetch(
        `${this.config.baseUrl}/api/v1/db/data/noco/${baseId}/${tableId}/${recordId}`,
        {
          method: 'GET',
          headers: this.headers,
        }
      );

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API - Registro encontrado:', data);
        return data;
      } else {
        const errorText = await response.text();
        console.error('‚ùå API - Erro ao buscar registro:', response.status, errorText);
        return null;
      }
    } catch (error) {
      console.error('‚ùå API - Erro ao buscar registro por ID:', error);
      return null;
    }
  }

  async createRecord(baseId: string, tableId: string, data: any): Promise<boolean> {
    try {
      console.log('‚ûï API - Criando novo registro...');
      console.log('üì¶ API - Dados para cria√ß√£o:', data);
      
      const response = await fetch(
        `${this.config.baseUrl}/api/v1/db/data/noco/${baseId}/${tableId}`,
        {
          method: 'POST',
          headers: this.headers,
          body: JSON.stringify(data),
        }
      );

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ API - Registro criado com sucesso:', result);
        return true;
      } else {
        const errorText = await response.text();
        console.error('‚ùå API - Erro na cria√ß√£o:', response.status, errorText);
        return false;
      }
    } catch (error) {
      console.error('‚ùå API - Erro ao criar registro:', error);
      return false;
    }
  }

  async updateRecord(baseId: string, tableId: string, recordId: string, data: any): Promise<boolean> {
    try {
      console.log('üìù API - Atualizando registro:', recordId);
      console.log('üì¶ API - Dados para atualiza√ß√£o:', data);
      
      const response = await fetch(
        `${this.config.baseUrl}/api/v1/db/data/noco/${baseId}/${tableId}/${recordId}`,
        {
          method: 'PATCH',
          headers: this.headers,
          body: JSON.stringify(data),
        }
      );

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ API - Registro atualizado com sucesso:', result);
        return true;
      } else {
        const errorText = await response.text();
        console.error('‚ùå API - Erro na atualiza√ß√£o:', response.status, errorText);
        return false;
      }
    } catch (error) {
      console.error('‚ùå API - Erro ao atualizar registro:', error);
      return false;
    }
  }

  async deleteRecord(baseId: string, tableId: string, recordId: string): Promise<boolean> {
    try {
      console.log('üóëÔ∏è API - Excluindo registro:', recordId);
      
      const response = await fetch(
        `${this.config.baseUrl}/api/v1/db/data/noco/${baseId}/${tableId}/${recordId}`,
        {
          method: 'DELETE',
          headers: this.headers,
        }
      );

      if (response.ok) {
        console.log('‚úÖ API - Registro exclu√≠do com sucesso');
        return true;
      } else {
        const errorText = await response.text();
        console.error('‚ùå API - Erro na exclus√£o:', response.status, errorText);
        return false;
      }
    } catch (error) {
      console.error('‚ùå API - Erro ao excluir registro:', error);
      return false;
    }
  }
}
