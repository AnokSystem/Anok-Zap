
import { nocodbService } from '@/services/nocodb';
import { NotificationRule } from '../types';
import { webhookService } from './webhookService';
import { userContextService } from '@/services/userContextService';

export const notificationSaveService = {
  saveNotification: async (
    rule: Partial<NotificationRule>,
    editingRule?: any
  ): Promise<{ success: boolean; webhookUrl: string }> => {
    console.log('üîÑ SERVI√áO - Salvamento iniciado');
    console.log('üìã SERVI√áO - Dados da regra recebidos:', rule);
    console.log('üìã SERVI√áO - Regra sendo editada:', editingRule);
    
    // Validar dados obrigat√≥rios antes de gerar webhook
    if (!rule.eventType || !rule.userRole) {
      console.error('‚ùå SERVI√áO - Dados obrigat√≥rios faltando:', {
        eventType: rule.eventType,
        userRole: rule.userRole
      });
      throw new Error('Tipo de evento e fun√ß√£o do usu√°rio s√£o obrigat√≥rios');
    }
    
    // Obter informa√ß√µes do usu√°rio atual
    const userId = userContextService.getUserId();
    const clientId = userContextService.getClientId();
    console.log('üë§ SERVI√áO - Usu√°rio atual:', { userId, clientId });
    
    // Obter webhook URL segmentado com valores validados
    const webhookUrl = webhookService.getWebhookUrl(
      rule.eventType,
      rule.userRole,
      rule.productScope || 'all'
    );
    
    console.log('üîó SERVI√áO - Webhook URL gerado:', webhookUrl);
    
    if (!webhookUrl) {
      console.error('‚ùå SERVI√áO - Webhook URL n√£o gerado');
      throw new Error('N√£o foi poss√≠vel gerar a URL do webhook');
    }
    
    // CORRE√á√ÉO: Preparar dados com campos consistentes e padronizados
    const notificationData: any = {
      eventType: rule.eventType,
      instance: rule.instanceId!,
      userRole: rule.userRole,
      platform: rule.platform!,
      profileName: rule.profileName!,
      productScope: rule.productScope || 'all',
      specificProductName: rule.specificProductName || '',
      messages: rule.messages,
      webhookUrl,
      // IMPORTANTE: Garantir que o userId seja salvo de forma consistente
      userId: userId,
      user_id: userId,
      client_id: clientId,
      ClientId: clientId,
      'ID do Usu√°rio': userId,
      timestamp: new Date().toISOString(),
      // NOVO: Salvar dados completos no JSON para facilitar a extra√ß√£o posterior
      jsonData: JSON.stringify({
        eventType: rule.eventType,
        instance: rule.instanceId,
        userRole: rule.userRole,
        platform: rule.platform,
        profileName: rule.profileName,
        productScope: rule.productScope || 'all',
        specificProductName: rule.specificProductName || '',
        messages: rule.messages,
        webhookUrl,
        userId: userId,
        user_id: userId,
        timestamp: new Date().toISOString(),
        saved_timestamp: new Date().toISOString()
      })
    };

    // Se estamos editando, incluir o ID correto
    if (editingRule && (editingRule.ID || editingRule.id)) {
      const recordId = editingRule.ID || editingRule.id;
      notificationData.ruleId = recordId;
      console.log('üìù SERVI√áO - Modo ATUALIZA√á√ÉO com ID:', recordId);
      console.log('üì§ SERVI√áO - Dados para atualiza√ß√£o:', notificationData);
    } else {
      console.log('‚ûï SERVI√áO - Modo CRIA√á√ÉO');
      console.log('üì§ SERVI√áO - Dados para cria√ß√£o:', notificationData);
    }

    try {
      console.log('üöÄ SERVI√áO - Chamando nocodbService.saveHotmartNotification...');
      
      // Salvar no NocoDB
      const success = await nocodbService.saveHotmartNotification(notificationData);
      
      console.log('üìä SERVI√áO - Resultado do NocoDB:', success);
      
      if (!success) {
        console.error('‚ùå SERVI√áO - Falha retornada pelo nocodbService');
        throw new Error('Falha ao salvar no banco de dados');
      }

      const isEditing = editingRule && (editingRule.ID || editingRule.id);
      console.log(isEditing ? '‚úÖ SERVI√áO - Notifica√ß√£o atualizada com sucesso' : '‚úÖ SERVI√áO - Notifica√ß√£o criada com sucesso');
      
      return { success: true, webhookUrl };
    } catch (error) {
      console.error('‚ùå SERVI√áO - Erro cr√≠tico:', error);
      console.error('‚ùå SERVI√áO - Stack trace:', error.stack);
      throw error;
    }
  }
};
