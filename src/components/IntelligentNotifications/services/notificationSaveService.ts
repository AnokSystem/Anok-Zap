
import { nocodbService } from '@/services/nocodb';
import { NotificationRule } from '../types';
import { webhookService } from './webhookService';

export const notificationSaveService = {
  saveNotification: async (
    rule: Partial<NotificationRule>,
    editingRule?: any
  ): Promise<{ success: boolean; webhookUrl: string }> => {
    console.log('üîÑ SERVI√áO - Salvamento iniciado');
    console.log('üìã SERVI√áO - Dados da regra recebidos:', rule);
    console.log('üìã SERVI√áO - Regra sendo editada:', editingRule);
    
    const webhookUrl = webhookService.getWebhookUrl(rule.eventType!);
    
    // CORRE√á√ÉO: Preparar dados garantindo mapeamento correto
    const notificationData: any = {
      eventType: rule.eventType!,
      instance: rule.instanceId!, // IMPORTANTE: Converter instanceId para instance
      userRole: rule.userRole!,
      platform: rule.platform!,
      profileName: rule.profileName!,
      messages: rule.messages,
      webhookUrl,
      timestamp: new Date().toISOString(),
    };

    // Se estamos editando, incluir o ID correto
    if (editingRule && (editingRule.ID || editingRule.id)) {
      const recordId = editingRule.ID || editingRule.id;
      notificationData.ruleId = recordId;
      console.log('üìù SERVI√áO - Modo ATUALIZA√á√ÉO com ID:', recordId);
      console.log('üì§ SERVI√áO - Dados para atualiza√ß√£o:', notificationData);
    } else {
      console.log('‚ûï SERVI√áO - Modo CRIA√á√ÉO');
      console.log('üì§ SERVI√áO - Dados para cria√ß√£o:', notificationData);
    }

    try {
      console.log('üöÄ SERVI√áO - Chamando nocodbService.saveHotmartNotification...');
      
      // Salvar no NocoDB
      const success = await nocodbService.saveHotmartNotification(notificationData);
      
      console.log('üìä SERVI√áO - Resultado do NocoDB:', success);
      
      if (!success) {
        console.error('‚ùå SERVI√áO - Falha retornada pelo nocodbService');
        throw new Error('Falha ao salvar no banco de dados');
      }

      const isEditing = editingRule && (editingRule.ID || editingRule.id);
      console.log(isEditing ? '‚úÖ SERVI√áO - Notifica√ß√£o atualizada com sucesso' : '‚úÖ SERVI√áO - Notifica√ß√£o criada com sucesso');
      
      return { success: true, webhookUrl };
    } catch (error) {
      console.error('‚ùå SERVI√áO - Erro cr√≠tico:', error);
      console.error('‚ùå SERVI√áO - Stack trace:', error.stack);
      throw error;
    }
  }
};
