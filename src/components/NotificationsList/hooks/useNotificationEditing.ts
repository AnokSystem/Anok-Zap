
import { useState } from 'react';
import { useToast } from "@/hooks/use-toast";
import { notificationSaveService } from '@/components/IntelligentNotifications/services/notificationSaveService';
import { Notification } from '../types';

export const useNotificationEditing = (
  setNotifications: React.Dispatch<React.SetStateAction<Notification[]>>,
  loadNotifications: () => Promise<void>
) => {
  const { toast } = useToast();
  const [editingNotification, setEditingNotification] = useState<Notification | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const editNotification = (notification: Notification) => {
    console.log('üìù Iniciando edi√ß√£o da notifica√ß√£o:', notification);
    setEditingNotification(notification);
    
    toast({
      title: "Modo de Edi√ß√£o Ativado",
      description: "Agora voc√™ pode editar os dados da notifica√ß√£o abaixo.",
    });
  };

  const cancelEdit = () => {
    console.log('‚ùå Cancelando edi√ß√£o');
    setEditingNotification(null);
    
    toast({
      title: "Edi√ß√£o Cancelada",
      description: "Modo de edi√ß√£o desativado",
    });
  };

  const saveEditedNotification = async (updatedNotificationData: any): Promise<boolean> => {
    if (!editingNotification) {
      console.error('‚ùå Nenhuma notifica√ß√£o sendo editada');
      return false;
    }

    setIsLoading(true);
    
    try {
      console.log('üíæ SALVAMENTO - Dados recebidos para edi√ß√£o:', updatedNotificationData);
      console.log('üíæ SALVAMENTO - Notifica√ß√£o original:', editingNotification);
      console.log('üíæ SALVAMENTO - ID da notifica√ß√£o:', editingNotification.ID);
      
      // CORRE√á√ÉO: Validar dados essenciais de forma mais robusta
      if (!updatedNotificationData.eventType || !updatedNotificationData.instanceId || 
          !updatedNotificationData.userRole || !updatedNotificationData.platform || 
          !updatedNotificationData.profileName) {
        console.error('‚ùå SALVAMENTO - Dados obrigat√≥rios faltando');
        console.error('‚ùå SALVAMENTO - Dados recebidos:', {
          eventType: updatedNotificationData.eventType,
          instanceId: updatedNotificationData.instanceId,
          userRole: updatedNotificationData.userRole,
          platform: updatedNotificationData.platform,
          profileName: updatedNotificationData.profileName
        });
        
        toast({
          title: "‚ùå Erro de Valida√ß√£o",
          description: "Dados obrigat√≥rios est√£o faltando",
          variant: "destructive",
        });
        return false;
      }

      // Verificar mensagens v√°lidas
      const validMessages = updatedNotificationData.messages?.filter(msg => 
        (msg.content && msg.content.trim() !== '') || msg.fileUrl
      ) || [];

      if (validMessages.length === 0) {
        console.error('‚ùå SALVAMENTO - Nenhuma mensagem v√°lida');
        toast({
          title: "‚ùå Erro de Valida√ß√£o",
          description: "Pelo menos uma mensagem √© obrigat√≥ria",
          variant: "destructive",
        });
        return false;
      }

      // CORRE√á√ÉO: Garantir que instanceId seja mapeado corretamente para instance
      const ruleData = {
        eventType: updatedNotificationData.eventType,
        instanceId: updatedNotificationData.instanceId, // Ser√° convertido no servi√ßo
        userRole: updatedNotificationData.userRole,
        platform: updatedNotificationData.platform,
        profileName: updatedNotificationData.profileName,
        messages: validMessages,
      };

      console.log('üíæ SALVAMENTO - Dados formatados para servi√ßo:', ruleData);
      console.log('üíæ SALVAMENTO - Mensagens v√°lidas:', validMessages.length);

      // CORRE√á√ÉO: Usar ID correto da notifica√ß√£o
      const editingRule = {
        ID: editingNotification.ID,
        id: editingNotification.ID // Garantir ambos os formatos
      };

      console.log('üíæ SALVAMENTO - Enviando para notificationSaveService...');
      console.log('üíæ SALVAMENTO - editingRule ID:', editingRule.ID);

      // Chamar o servi√ßo de salvamento
      const result = await notificationSaveService.saveNotification(
        ruleData,
        editingRule
      );

      console.log('üíæ SALVAMENTO - Resultado do servi√ßo:', result);

      if (result.success) {
        console.log('‚úÖ SALVAMENTO - Sucesso! Notifica√ß√£o atualizada no NocoDB');
        
        toast({
          title: "‚úÖ Sucesso",
          description: "Notifica√ß√£o atualizada com sucesso no banco de dados!",
        });
        
        // Recarregar notifica√ß√µes para mostrar as mudan√ßas
        console.log('üîÑ SALVAMENTO - Recarregando notifica√ß√µes...');
        await loadNotifications();
        
        // Sair do modo de edi√ß√£o
        setEditingNotification(null);
        
        return true;
      } else {
        console.error('‚ùå SALVAMENTO - Falha no servi√ßo');
        toast({
          title: "‚ùå Erro",
          description: "Falha ao salvar no banco de dados",
          variant: "destructive",
        });
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå SALVAMENTO - Erro cr√≠tico:', error);
      console.error('‚ùå SALVAMENTO - Stack trace:', error.stack);
      toast({
        title: "‚ùå Erro",
        description: "Erro inesperado ao salvar altera√ß√µes",
        variant: "destructive",
      });
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    editingNotification,
    isLoading,
    editNotification,
    cancelEdit,
    saveEditedNotification,
  };
};
