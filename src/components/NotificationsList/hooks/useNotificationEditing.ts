
import { useState } from 'react';
import { useToast } from "@/hooks/use-toast";
import { notificationSaveService } from '@/components/IntelligentNotifications/services/notificationSaveService';
import { Notification } from '../types';

export const useNotificationEditing = (
  setNotifications: React.Dispatch<React.SetStateAction<Notification[]>>,
  loadNotifications: () => Promise<void>
) => {
  const { toast } = useToast();
  const [editingNotification, setEditingNotification] = useState<Notification | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const editNotification = (notification: Notification) => {
    console.log('üìù Iniciando edi√ß√£o da notifica√ß√£o:', notification);
    setEditingNotification(notification);
    
    toast({
      title: "Modo de Edi√ß√£o Ativado",
      description: "Agora voc√™ pode editar os dados da notifica√ß√£o abaixo.",
    });
  };

  const cancelEdit = () => {
    console.log('‚ùå Cancelando edi√ß√£o');
    setEditingNotification(null);
    
    toast({
      title: "Edi√ß√£o Cancelada",
      description: "Modo de edi√ß√£o desativado",
    });
  };

  const saveEditedNotification = async (updatedNotificationData: any): Promise<boolean> => {
    if (!editingNotification) {
      console.error('‚ùå Nenhuma notifica√ß√£o sendo editada');
      return false;
    }

    setIsLoading(true);
    
    try {
      console.log('üíæ Salvando notifica√ß√£o editada...');
      console.log('üìã Dados originais da notifica√ß√£o:', editingNotification);
      console.log('üìã Dados atualizados recebidos:', updatedNotificationData);
      
      // Validar dados essenciais
      if (!updatedNotificationData.eventType || !updatedNotificationData.instanceId || 
          !updatedNotificationData.userRole || !updatedNotificationData.platform || 
          !updatedNotificationData.profileName) {
        console.error('‚ùå Dados obrigat√≥rios faltando para salvamento');
        console.error('‚ùå Dados faltando:', {
          eventType: !updatedNotificationData.eventType,
          instanceId: !updatedNotificationData.instanceId,
          userRole: !updatedNotificationData.userRole,
          platform: !updatedNotificationData.platform,
          profileName: !updatedNotificationData.profileName
        });
        return false;
      }

      // Verificar se h√° pelo menos uma mensagem v√°lida
      const validMessages = updatedNotificationData.messages?.filter(msg => 
        (msg.content && msg.content.trim() !== '') || msg.fileUrl
      ) || [];

      if (validMessages.length === 0) {
        console.error('‚ùå Nenhuma mensagem v√°lida encontrada');
        return false;
      }

      // Preparar dados no formato correto para o servi√ßo - CRUCIAL: usar 'instance' para o banco
      const ruleData = {
        eventType: updatedNotificationData.eventType,
        instance: updatedNotificationData.instanceId, // O banco espera 'instance', n√£o 'instanceId'
        userRole: updatedNotificationData.userRole,
        platform: updatedNotificationData.platform,
        profileName: updatedNotificationData.profileName,
        messages: validMessages,
      };

      console.log('üì§ Dados formatados para o servi√ßo (com instance):', ruleData);
      console.log('üîë ID da notifica√ß√£o para edi√ß√£o:', editingNotification.ID);

      // Usar o servi√ßo de salvamento com o editingRule contendo o ID
      const result = await notificationSaveService.saveNotification(
        ruleData,
        { ID: editingNotification.ID, id: editingNotification.ID }
      );

      if (result.success) {
        console.log('‚úÖ Notifica√ß√£o atualizada com sucesso no banco');
        
        // Recarregar as notifica√ß√µes do banco para garantir sincroniza√ß√£o
        await loadNotifications();
        
        // Fechar o modo de edi√ß√£o
        setEditingNotification(null);
        
        return true;
      } else {
        console.error('‚ùå Falha no servi√ßo de salvamento');
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao salvar notifica√ß√£o editada:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    editingNotification,
    isLoading,
    editNotification,
    cancelEdit,
    saveEditedNotification,
  };
};
